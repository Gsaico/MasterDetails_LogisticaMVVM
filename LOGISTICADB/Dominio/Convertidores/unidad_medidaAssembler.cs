//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2015/07/08 - 22:06:41
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using Dominio.Dtos;
using PersistenciaDatos;

namespace Dominio.Convertidores
{

    /// <summary>
    /// Assembler for <see cref="unidad_medida"/> and <see cref="unidad_medidaDTO"/>.
    /// </summary>
    public static partial class unidad_medidaAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="unidad_medidaDTO"/> converted from <see cref="unidad_medida"/>.</param>
        static partial void OnDTO(this unidad_medida entity, unidad_medidaDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="unidad_medida"/> converted from <see cref="unidad_medidaDTO"/>.</param>
        static partial void OnEntity(this unidad_medidaDTO dto, unidad_medida entity);

        /// <summary>
        /// Converts this instance of <see cref="unidad_medidaDTO"/> to an instance of <see cref="unidad_medida"/>.
        /// </summary>
        /// <param name="dto"><see cref="unidad_medidaDTO"/> to convert.</param>
        public static unidad_medida ToEntity(this unidad_medidaDTO dto)
        {
            if (dto == null) return null;

            var entity = new unidad_medida();

            entity.ID_UnidadMedida = dto.ID_UnidadMedida;
            entity.nombre = dto.nombre;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="unidad_medida"/> to an instance of <see cref="unidad_medidaDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="unidad_medida"/> to convert.</param>
        public static unidad_medidaDTO ToDTO(this unidad_medida entity)
        {
            if (entity == null) return null;

            var dto = new unidad_medidaDTO();

            dto.ID_UnidadMedida = entity.ID_UnidadMedida;
            dto.nombre = entity.nombre;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="unidad_medidaDTO"/> to an instance of <see cref="unidad_medida"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<unidad_medida> ToEntities(this IEnumerable<unidad_medidaDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="unidad_medida"/> to an instance of <see cref="unidad_medidaDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<unidad_medidaDTO> ToDTOs(this IEnumerable<unidad_medida> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
